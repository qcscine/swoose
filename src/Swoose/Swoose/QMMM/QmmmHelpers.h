/**
 * @file
 * @copyright This code is licensed under the 3-clause BSD license.\n
 *            Copyright ETH Zurich, Department of Chemistry and Applied Biosciences, Reiher Group.\n
 *            See LICENSE.txt for details.
 */

#ifndef SWOOSE_QMMM_QMMMHELPERS_H
#define SWOOSE_QMMM_QMMMHELPERS_H

#include <Eigen/Core>
#include <list>
#include <vector>

namespace Scine {

namespace Utils {
class Atom;
class AtomCollection;
using PositionCollection = Eigen::Matrix<double, Eigen::Dynamic, 3, Eigen::RowMajor>;
} // namespace Utils

namespace Qmmm {
namespace QmmmHelpers {

/**
 * @struct ChargeRedistributionResult QmmmHelpers.h
 * @brief A small container for the result of a charge redistribution, containing the new atomic charges,
 *        the auxiliary virtual charges that are not placed on atoms as well as their positions.
 */
struct ChargeRedistributionResult {
  std::vector<double> atomicCharges;
  std::vector<double> auxiliaryCharges;
  Utils::PositionCollection positionsOfAuxiliaryCharges;
};

std::vector<double> writeChargesAndPositionsAsList(const Utils::AtomCollection& structure,
                                                   const ChargeRedistributionResult& chargeRedistributionResult,
                                                   const std::vector<int>& listOfQmAtoms);

/**
 * @brief Writes the point charges of the MM region to a file needed by ORCA.
 * @param positions The positions of all atoms.
 * @param chargeRedistributionResult The MM atomic charges of all atoms combined with additional atomic charges
 *                                   generated by the charge redistribution process.
 * @param listOfQmAtoms A vector containing the indices of the QM atoms so that they can be excluded.
 * @param filename Path to the filename to which the point charges are written.
 */
void writePointChargesFile(const Utils::PositionCollection& positions,
                           const ChargeRedistributionResult& chargeRedistributionResult,
                           const std::vector<int>& listOfQmAtoms, const std::string& filename, bool writeTurbomoleFormat);

/**
 * @brief Creates the QM region from the whole structure.
 * @param listOfQmAtoms A vector containing the indices of the QM atoms.
 * @param structure The full molecular structure.
 * @param listsOfNeighbors A vector containing a list of neighboring atom indices (covalently bonded) for every atom.
 * @param xyzFilename Name of file to which the created QM region is written in XYZ format
 *                    (only writes if string is not empty).
 * @param mmBoundaryAtoms A vector that contains the indices of the MM atoms that are bonded to QM atoms. This
 *                        vector should be empty when it is passed in and will be updated in this function.
 * @return The molecular structure of the QM region.
 */
Utils::AtomCollection createQmRegion(const std::vector<int>& listOfQmAtoms, const Utils::AtomCollection& structure,
                                     const std::vector<std::list<int>>& listsOfNeighbors,
                                     const std::string& xyzFilename, std::vector<int>& mmBoundaryAtoms);

/**
 * @brief Checks the validity of the selected QM region.
 * @param listOfQmAtoms A vector containing the indices of the QM atoms.
 * @param structure The molecular structure of the full system.
 * @throws std::runtime_error Throws error if QM region is not valid.
 */
void checkValidityOfQmRegion(const std::vector<int>& listOfQmAtoms, const Utils::AtomCollection& structure);

/**
 * @brief Adds the link atoms to the QM region.
 * @param qmRegion The QM region without the link atoms (passed by reference).
 * @param fullStructure The molecular structure of the full system.
 * @param listsOfNeighbors A vector containing a list of neighboring atom indices (covalently bonded) for every atom.
 * @param listOfQmAtoms A vector containing the indices of the QM atoms.
 * @param mmBoundaryAtoms A vector that contains the indices of the MM atoms that are bonded to QM atoms. This
 *                        vector should be empty when it is passed in and will be updated in this function.
 */
void addAllLinkAtoms(Utils::AtomCollection& qmRegion, const Utils::AtomCollection& fullStructure,
                     const std::vector<std::list<int>>& listsOfNeighbors, const std::vector<int>& listOfQmAtoms,
                     std::vector<int>& mmBoundaryAtoms);

/**
 * @brief Adds a single link atom where a bond between two given atoms exists in the full molecular structure.
 * @param qmRegion The QM region in its current form (some link atoms may have been added already).
 * @param qmAtom The atom in the QM region that was part of the cleaved bond.
 * @param mmAtom The atom in the MM region that was part of the cleaved bond.
 */
void addOneLinkAtom(Utils::AtomCollection& qmRegion, const Utils::Atom& qmAtom, const Utils::Atom& mmAtom);

/**
 * @brief Performs a charge redistribution, so that the MM atoms close to the QM-MM boundary carry no charge.
 * @param charges The original charges of the molecular system of which some charges should be redistributed.
 * @param positions The positions of the whole molecular system.
 * @param mmBoundaryAtoms A vector that contains the indices of the MM atoms that are bonded to QM atoms.
 * @param listsOfNeighbors A vector containing a list of neighboring atom indices (covalently bonded) for every atom.
 * @param listOfQmAtoms A vector containing the indices of the QM atoms.
 * @param scheme The scheme to apply to redistribute the charges (conserve dipoles?).
 * @return The new atomic charges of the molecular system combined with additional point charges and their positions
 *         combined in a struct.
 */
ChargeRedistributionResult getRedistributedCharges(std::vector<double> charges, const Utils::PositionCollection& positions,
                                                   const std::vector<int>& mmBoundaryAtoms,
                                                   const std::vector<std::list<int>>& listsOfNeighbors,
                                                   const std::vector<int>& listOfQmAtoms, const std::string& scheme);

} // namespace QmmmHelpers
} // namespace Qmmm
} // namespace Scine

#endif // SWOOSE_QMMM_QMMMHELPERS_H
